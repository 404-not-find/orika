#summary This page contains details of each release.
#labels Featured
=Release Notes=
_by version_
==1.2.1 (bug fix)==
  * Issue 33: (enhancement) Improved extensibility of ClassMapBuilder
  * Issue 46: Class-cast exception for mapped objects 
  * Issue 48: Exception on collection mapping
  * Issue 49: MappingException when enum toString() is overridden
  * Issue 50: Exclusions are ignored when combined with used mappers
----
==1.2.0 (feature)==
  * Improved debugging: detailed description of what was generated (and how) for registered and auto-generated mappers
    * example:
<pre>
08:56:01.928 [main] DEBUG m.g.o.impl.generator.MapperGenerator - Generating new mapper for (BookImpl, BookDTOWithAltCaseEnum)	
       OrikaBookDTOWithAltCaseEnumBookImplMapper892899908.mapAToB(BookImpl, BookDTOWithAltCaseEnum) {
	 Field(format(PublicationFormat), format(PublicationFormatDTOAltCase)) : using converter LegacyConverter(ma.glasnost.orika.test.enums.EnumsTestCase$1@150ac9a8)
	 Field(title(String), title(String)) : treating as immutable (using copy-by-reference)
	}
	OrikaBookDTOWithAltCaseEnumBookImplMapper892899908.mapBToA(BookDTOWithAltCaseEnum, BookImpl) {
	 Field(format(PublicationFormatDTOAltCase), format(PublicationFormat)) : mapping from String or enum to enum
	 Field(title(String), title(String)) : treating as immutable (using copy-by-reference)
	}
	Types used: [PublicationFormatDTOAltCase]
        
       Converters used: LegacyConverter(ma.glasnost.orika.test.enums.EnumsTestCase$1@150ac9a8)]
</pre>
  * Improved debugging: detailed description of class-mapping process for auto-generated mappers; now you can see what was mapped "`byDefault()`"
    * example:
<pre>
08:56:01.910 [main] DEBUG m.g.orika.metadata.ClassMapBuilder - ClassMap created:
	ClassMapBuilder.map(BookImpl, BookDTOWithAltCaseEnum)
	 .field([format(PublicationFormat)], [format(PublicationFormatDTOAltCase)])
	 .field([title(String)], [title(String)])</pre>
  * Improved debugging: details regarding the mapping 'strategy' chosen to map a particular set of inputs
    * example:
<pre>
08:56:01.929 [main] DEBUG m.g.orika.impl.MapperFacadeImpl - MappingStrategy resolved and cached:
      Inputs:[ sourceClass: ma.glasnost.orika.test.enums.EnumsTestCaseClasses.BookImpl, sourceType: BookImpl, destinationType: BookDTOWithAltCaseEnum]
    
      Resolved:[ strategy: InstantiateByDefaultAndUseCustomMapperStrategy, sourceType: BookImpl, destinationType: BookDTOWithAltCaseEnum, mapper: ma.glasnost.orika.generated.OrikaBookDTOWithAltCaseEnumBookImplMapper892899908@560c7816, mapInverse?: false]
</pre> 
  * Support for java.util.Map types
    * As properties of existing classes, for auto-generation
    * Via direct mapping methods ( mapAsMap(...), mapAsList(...) )
  * Support for direct registration of custom Mapper instances
    * example: `MapperFactory.registerMapper(Mapper mapper)`
  * Support for registration of concrete types to be instantiated for abstract classes or interfaces
    * example: `MapperFactory.registerConcreteType(anInterface, aConcreteType)`
  * Registered custom converters will now have access to an instance of the current MapperFacade (via a protected variable named `mapperFacade`)
  * Improved error reporting for mapping failures, giving better context information about the inputs of the mapping operation, and (if possible) the mapper/converter/etc. used
    * example:
<pre>
ma.glasnost.orika.MappingException: While attempting the folling mapping:
    sourceType = BigDecimal 
    destinationType = Double
    Error occurred: No converter registered for conversion from BigDecimal to Double, nor any ObjectFactory which can generate Double from BigDecimal
    
    at ma.glasnost.orika.impl.DefaultMapperFactory.lookupMapper(DefaultMapperFactory.java:372)
    at ma.glasnost.orika.impl.MapperFacadeImpl.prepareMapper(MapperFacadeImpl.java:442)
...
</pre>
  * Support for extending ClassMapBuilder (enhancement for Issue 33)
  * Built-in converters for numeric and data/time types which can be enabled using `useBuiltinConverters(true)` on DefaultMapperFactory.Builder
  * Change to the way ClassMapBuilder instances are obtained; the old method, while convenient, resulted in a static member variable containing a PropertyResolverStrategy which is not desirable; now, ClassMapBuilders are obtained from the MapperFactory instance, like so:
{{{
   // new, preferred pattern
   mapperFactory.classMap(TypeA.class, TypeB.class)
      ...
   // old, deprecated pattern
   ClassMapBuilder.map(TypeA.class, TypeB.class)
}}}
  * Bug fixes for:
   * issue 45
   * issue 34
----

==1.1.9 (bug fix)==
  * Issue 41 : StackOverflowError for nested Enum	
  * Issue 38 : Option to not set target object property when property value in the source object is null	
  * Issue 36:  Cleanup orika-core pom.xml 
  * Issue 35 : Remove compile-scope dependency to slf4j-simple

==1.1.8 (bug fix)==
  * Issue 30: MappingException: cannot determine runtime type of destination collection
  * Issue 32: ClassLoader leak via "strategyKey" ThreadLocal

==1.1.7 (bug fix)==
  * Issue 28: StackoverflowException on recursively-defined type

==1.1.6 (bug fix)==
  * Issue 26: Generic super-type not recognized
  * Issue 27: Occasionally the wrong Type is resolved for a class
  * fixes for multi-threading issues (simultaneous generation of mappers and object factories could occasionally fail)

==1.1.5 (bug fix)==
  * Issue 21: NPE when collection is changed. (failure to distinguish between mapping strategies for mapping in place and those for mapping to a new instance)
  * fix for NPE on TypeFactory.valueOf(null) when mapping using Class-based mapping methods with a null input value

==1.1.4 (bug fix)==
  * Issue 20: StackOverflowError mapping hibernate4 proxy.