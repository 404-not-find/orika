#summary New features added for 1.2.0 release

=New Features for release 1.2.0=
  * Improved debugging: detailed description of what was generated (and how) for registered and auto-generated mappers; for example:
<pre>
08:56:01.928 [main] DEBUG m.g.o.impl.generator.MapperGenerator - Generating new mapper for (BookImpl, BookDTOWithAltCaseEnum)	
       OrikaBookDTOWithAltCaseEnumBookImplMapper892899908.mapAToB(BookImpl, BookDTOWithAltCaseEnum) {
	 Field(format(PublicationFormat), format(PublicationFormatDTOAltCase)) : using converter LegacyConverter(ma.glasnost.orika.test.enums.EnumsTestCase$1@150ac9a8)
	 Field(title(String), title(String)) : treating as immutable (using copy-by-reference)
	}
	OrikaBookDTOWithAltCaseEnumBookImplMapper892899908.mapBToA(BookDTOWithAltCaseEnum, BookImpl) {
	 Field(format(PublicationFormatDTOAltCase), format(PublicationFormat)) : mapping from String or enum to enum
	 Field(title(String), title(String)) : treating as immutable (using copy-by-reference)
	}
	Types used: [PublicationFormatDTOAltCase]
        
       Converters used: LegacyConverter(ma.glasnost.orika.test.enums.EnumsTestCase$1@150ac9a8)]
</pre>
    * Improved debugging: detailed description of class-mapping process for auto-generated mappers; now you can see what was mapped "`byDefault()`", for example:
<pre>
08:56:01.910 [main] DEBUG m.g.orika.metadata.ClassMapBuilder - ClassMap created:
	ClassMapBuilder.map(BookImpl, BookDTOWithAltCaseEnum)
	 .field([format(PublicationFormat)], [format(PublicationFormatDTOAltCase)])
	 .field([title(String)], [title(String)])</pre>
 * Improved debugging: details regarding the mapping 'strategy' chosen to map a particular set of inputs; for example:
<pre>
08:56:01.929 [main] DEBUG m.g.orika.impl.MapperFacadeImpl - MappingStrategy resolved and cached:
      Inputs:[ sourceClass: ma.glasnost.orika.test.enums.EnumsTestCaseClasses.BookImpl, sourceType: BookImpl, destinationType: BookDTOWithAltCaseEnum]
    
      Resolved:[ strategy: InstantiateByDefaultAndUseCustomMapperStrategy, sourceType: BookImpl, destinationType: BookDTOWithAltCaseEnum, mapper: ma.glasnost.orika.generated.OrikaBookDTOWithAltCaseEnumBookImplMapper892899908@560c7816, mapInverse?: false]
</pre> 
 * Support for java.util.Map types
    * As properties of existing classes, for auto-generation
    * Via direct mapping methods ( mapAsMap(...), mapAsList(...) )
 * Support for direct registration of custom Mapper instances
    * example: `MapperFactory.registerMapper(Mapper mapper)`